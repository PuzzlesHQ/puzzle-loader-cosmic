import dev.puzzleshq.accesswriter.AccessWriters
import dev.puzzleshq.buildsrc.GenericTransformer
import me.lucko.jarrelocator.JarRelocator
import me.lucko.jarrelocator.Relocation
import org.gradle.api.artifacts.transform.TransformParameters;

plugins {
    id 'java'
}

group = 'dev.puzzleshq'
version = '1.0-SNAPSHOT'

repositories {
    ivy {
        name "Cosmic Reach"
        url "https://github.com/PuzzlesHQ/CRArchive/releases/download"
        patternLayout {
            artifact "/[revision]/cosmic-reach-[classifier]-[revision].jar"
        }
        // This is required in Gradle 6.0+ as metadata file (ivy.xml) is mandatory
        metadataSources {
            artifact()
        }

        content {
            it.includeModule "finalforeach", "cosmic-reach"
        }
    }
    mavenCentral()
    mavenLocal()
}

sourceSets {
    client
    common
    server
    datagen
}

configurations {
    allCompileOnly

    clientCompileOnly.extendsFrom(allCompileOnly)
    commonCompileOnly.extendsFrom(allCompileOnly)
    serverCompileOnly.extendsFrom(allCompileOnly)

    allImpl
    clientImplementation.extendsFrom(allImpl)
    commonImplementation.extendsFrom(allImpl)
    serverImplementation.extendsFrom(allImpl)

    clientBundle
    commonBundle
    serverBundle

    clientImplementation.extendsFrom(clientBundle)
    commonImplementation.extendsFrom(commonBundle)
    serverImplementation.extendsFrom(serverBundle)

    clientInternal
    serverInternal

    clientImplementation.extendsFrom(clientInternal)
    serverImplementation.extendsFrom(serverInternal)
    serverImplementation.extendsFrom(commonBundle)

}

boolean usingSingleJar = false;
String version = "0.4.11-alpha"

var jar = files("./lib/Cosmic-Reach-0.4.10b.jar");

dependencies {

    clientCompileOnly "org.jetbrains:annotations:24.0.0"
    serverCompileOnly "org.jetbrains:annotations:24.0.0"
    commonCompileOnly "org.jetbrains:annotations:24.0.0"

    clientBundle "dev.puzzleshq:puzzle-loader-core:69.69.69:client"
    clientBundle "dev.puzzleshq:puzzle-loader-core:69.69.69:common"
    commonBundle "dev.puzzleshq:puzzle-loader-core:69.69.69:common"
    serverBundle "dev.puzzleshq:puzzle-loader-core:69.69.69:common"

    if (usingSingleJar) {
        clientImplementation(jar)
        commonImplementation(jar)
        serverImplementation(jar)
    } else {
        clientImplementation("finalforeach:cosmic-reach:$version:client")
        commonImplementation("finalforeach:cosmic-reach:$version:server")
        serverImplementation("finalforeach:cosmic-reach:$version:server")
    }

    clientImplementation(sourceSets.common.output);
    serverImplementation(sourceSets.common.output);
    {
        allImpl "org.ow2.asm:asm:$asm_version"
        allImpl "org.ow2.asm:asm-tree:$asm_version"
        allImpl "org.ow2.asm:asm-util:$asm_version"
        allImpl "org.ow2.asm:asm-analysis:$asm_version"
        allImpl "org.ow2.asm:asm-commons:$asm_version"

        allImpl "dev.puzzleshq:puzzle-annotations:1.0.0"
        allImpl "dev.puzzleshq:access-writer:1.0.3"
        allImpl "dev.puzzleshq:mod-format-framework:1.0.0"

        allImpl "org.hjson:hjson:$hjson_version"

        allImpl "org.reflections:reflections:$reflections_version"
        allImpl("net.neoforged:bus:$eventbus_version") {
            exclude group: "org.apache.logging.log4j", module: "log4j-api"
        }

        allImpl annotationProcessor("io.github.llamalad7:mixinextras-fabric:$mixin_extras_version")
        allImpl("net.fabricmc:sponge-mixin:$mixin_version") {
            exclude group: "com.google.code.gson", module: "gson"
            exclude group: "com.google.guava", module: "guava"
        }
        allImpl "net.sf.jopt-simple:jopt-simple:$jopt_simple_version"

        allImpl "com.github.zafarkhaja:java-semver:0.10.2"

        allImpl 'org.slf4j:slf4j-ext:1.7.23'
        allImpl 'org.slf4j:slf4j-api:1.7.23'
        allImpl "org.apache.logging.log4j:log4j-api:$slf4j_version"
        allImpl "org.apache.logging.log4j:log4j-core:$slf4j_version"
        allImpl "org.apache.logging.log4j:log4j-slf4j-impl:$slf4j_version"
    }

}

var runDir = file("./run")

tasks.register("runClient", JavaExec) {
    classpath += sourceSets.client.runtimeClasspath
    classpath += sourceSets.common.runtimeClasspath

    mainClass = "dev.puzzleshq.puzzleloader.loader.launch.pieces.ClientPiece"
}

tasks.register("runServer", JavaExec) {
    classpath += sourceSets.server.runtimeClasspath
    classpath += sourceSets.common.runtimeClasspath

    mainClass = "dev.puzzleshq.puzzleloader.loader.launch.pieces.ServerPiece"
    if (!runDir.exists()) runDir.mkdirs()
    workingDir(runDir)
}

wrapper {
    gradleVersion = "8.14"
    distributionType = Wrapper.DistributionType.ALL
}

java.toolchain.languageVersion.set(JavaLanguageVersion.of(24));

abstract class MyTransform implements TransformAction<TransformParameters.None> {

    @InputArtifact
    abstract Provider<FileSystemLocation> getInputArtifact();

    @Override
    void transform(TransformOutputs outputs) {
        var inp = inputArtifact.get().asFile;
        var out = outputs.file(inp.name.replace(".jar", "-transformed.jar"));

        List<Relocation> rules = new ArrayList<>();
//        rules.add(new Relocation("org.objectweb", "bundled.org.objectweb"));
//        rules.add(new Relocation("org.spongepowered.include", "bundled"));

        JarRelocator relocator = new JarRelocator(inp, out, rules);
        relocator.run();

        AccessWriters.init(null)
        AccessWriters.MERGED.add("public", "org/spongepowered/asm/mixin/transformer/MixinTransformer")
        AccessWriters.MERGED.add("public", "org/spongepowered/asm/mixin/transformer/MixinTransformer", "<init>", "()V")
        AccessWriters.MERGED.add("public", "org/spongepowered/asm/mixin/MixinEnvironment", "gotoPhase", '(Lorg/spongepowered/asm/mixin/MixinEnvironment$Phase;)V')

        GenericTransformer.transform(out)
    }
}
Attribute<Boolean> manipulated = Attribute.of("manipulated", Boolean.class);

afterEvaluate {
    project.getDependencies().getAttributesSchema().attribute(manipulated);
    project.getDependencies().getArtifactTypes().getByName("jar", artifact -> {
        artifact.getAttributes().attribute(manipulated, false);
    });

    project.getDependencies().registerTransform(MyTransform) {
        getFrom().attribute(manipulated, false);
        getTo().attribute(manipulated, true);
    }

    project.getConfigurations().all(config -> {
        if (config.isCanBeResolved())
            config.getAttributes().attribute(manipulated, true);
    });
}
